(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{302:function(t,a,e){"use strict";e.r(a);var s=e(19),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"제어자-modifier"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#제어자-modifier"}},[t._v("#")]),t._v(" 제어자(modifier)")]),t._v(" "),e("p",[e("em",[t._v("written by sohyeon, hyemin 💡")])]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"_1-제어자란"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-제어자란"}},[t._v("#")]),t._v(" 1. 제어자란?")]),t._v(" "),e("p",[t._v("제어자(modifier)는 클래스, 변수 또는 메서드의 선언부에 함께 사용되어 부가적인 의미를 부여한다.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("접근 제어자 : public, protected, default, private\n그 외 : static, final, abstract, native, transient, synchronized, volatile, strictfp\n")])])]),e("p",[t._v("접근 제어자는 하나의 대상에 대해서 public과 private 등 네 가지 중 하나만 선택해서 사용할 수 있다.")]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"_2-static-클래스의-공통적인"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-static-클래스의-공통적인"}},[t._v("#")]),t._v(" 2. static - 클래스의, 공통적인")]),t._v(" "),e("p",[t._v("인스턴스변수는 하나의 클래스로부터 생성되었더라도 각기 다른 값을 유지하지만, 클래스변수(static멤버변수)는 인스턴스에 관계없이 같은 값을 갖는다."),e("br"),t._v("\n그 이유는 "),e("code",[t._v("모든 인스턴스가 공유하기 때문")]),t._v("이다.")]),t._v(" "),e("p",[e("code",[t._v("static이 사용될 수 있는 곳 - 멤버변수, 메서드, 초기화 블럭")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("제어자")]),t._v(" "),e("th",[t._v("대상")]),t._v(" "),e("th",[t._v("의미")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("static")]),t._v(" "),e("td",[t._v("멤버변수")]),t._v(" "),e("td",[t._v("- 모든 인스턴스에 공통적으로 사용되는 클래스변수가 된다."),e("br"),t._v("- 클래스변수는 인스턴스를 생성하지 않고도 사용 가능하다."),e("br"),t._v("- 클래스가 메모리에 로드될 때 생성된다.")])]),t._v(" "),e("tr",[e("td",[t._v("static")]),t._v(" "),e("td",[t._v("메서드")]),t._v(" "),e("td",[t._v("- 인스턴스를 생성하지 않고도 호출이 가능한 static 메서드가 된다."),e("br"),t._v("- static메서드 내에서는 인스턴스 멤버들을 직접 사용할 수 없다.")])])])]),t._v(" "),e("ul",[e("li",[t._v("인스턴스 멤버를 사용하지 않는 메서드는 static을 붙여서 static메서드로 선언할 것")]),t._v(" "),e("li",[t._v("static 메서드로 하는 것이 인스턴스를 생성하지 않고도 호출이 가능해서 더 편리하고 속도도 더 빠르다.")])]),t._v(" "),e("h4",{attrs:{id:"ex-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ex-예제"}},[t._v("#")]),t._v(" ex) 예제")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class StaticTest {\n    static int width = 200;          // 클래스 변수 (static변수)\n    static int height = 120;         // 클래스 변수 (static변수)\n\n    static {                         // 클래스 초기화 블럭\n        // static변수의 복잡한 초기화 수행\n    }\n\n    static int max(int a, int b) {   // 클래스 메서드(static메서드)\n        return a > b ? a : b;\n    }\n}\n")])])]),e("br"),t._v(" "),e("h2",{attrs:{id:"_3-final-마지막의-변경될-수-없는"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-final-마지막의-변경될-수-없는"}},[t._v("#")]),t._v(" 3. final - 마지막의, 변경될 수 없는")]),t._v(" "),e("p",[t._v("final은 "),e("code",[t._v("마지막의")]),t._v(" 또는 "),e("code",[t._v("변경될 수 없는")]),t._v("의 의미를 가지고 있다.")]),t._v(" "),e("p",[e("code",[t._v("final이 사용될 수 있는 곳 - 클래스, 메서드, 멤버변수, 지역변수")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("제어자")]),t._v(" "),e("th",[t._v("대상")]),t._v(" "),e("th",[t._v("의미")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("final")]),t._v(" "),e("td",[t._v("클래스")]),t._v(" "),e("td",[t._v("- 변경될 수 없는 클래스, 확장될 수 없는 클래스가 된다."),e("br"),t._v("그래서 final로 지정된 클래스는 다른 클래스의 조상이 될 수 없다.")])]),t._v(" "),e("tr",[e("td",[t._v("final")]),t._v(" "),e("td",[t._v("메서드")]),t._v(" "),e("td",[t._v("- 변경될 수 없는 메서드. final로 지정된 메서드는 오버라이딩을 통해 재정의 될 수 없다.")])]),t._v(" "),e("tr",[e("td",[t._v("final")]),t._v(" "),e("td",[t._v("멤버변수, 지역변수")]),t._v(" "),e("td",[t._v("- 변수 앞에 final이 붙으면, 값을 변경할 수 없는 상수가 된다.")])])])]),t._v(" "),e("h4",{attrs:{id:"ex-예제-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ex-예제-2"}},[t._v("#")]),t._v(" ex) 예제")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("final class FinalTest {             // 조상이 될 수 없는 클래스\n    final int MAX_SIZE = 10;        // 값을 변경할 수 없는 멤버변수(상수)\n\n    final void getMaxSize() {       // 오버라이딩할 수 없는 메서드(변경불가)\n        final int LV = MAX_SIZE;    // 값을 변경할 수 없는 지역변수(상수)\n        return MAX_SIZE;\n    }\n}\n")])])]),e("h3",{attrs:{id:"생성자를-이용한-final멤버-변수의-초기화"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#생성자를-이용한-final멤버-변수의-초기화"}},[t._v("#")]),t._v(" 생성자를 이용한 final멤버 변수의 초기화")]),t._v(" "),e("p",[t._v("final이 붙은 변수는 상수이므로 일반적으로 선언과 초기화를 동시에 하지만, "),e("code",[t._v("인스턴스변수의 경우 생성자에서 초기화 되도록")]),t._v(" 할 수 있다.")]),t._v(" "),e("p",[t._v("클래스 내에 "),e("code",[t._v("매개변수를 갖는 생성자를 선언")]),t._v("하여, 인스턴스를 생성할 때 final이 붙은 멤버변수를 초기화하는데 필요한 값을 생성자의 매개변수로부터 제공받는다.")]),t._v(" "),e("h4",{attrs:{id:"ex-예제-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ex-예제-3"}},[t._v("#")]),t._v(" ex) 예제")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class Card {\n    final int NUMBER;               // 상수지만 선언과 함께 초기화 하지 않고\n    final String KIND;              // 생성자에서 단 한번만 초기화할 수 있다.\n    static int width = 100;\n    static int height = 250;\n\n    Card(String kind, int num) {\n        KIND = kind;\n        NUMBER = num;\n    }\n\n    Card() {\n        this("HEART", 1);\n    }\n}\n')])])]),e("br"),t._v(" "),e("h2",{attrs:{id:"_4-abstract-추상의-미완성의"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-abstract-추상의-미완성의"}},[t._v("#")]),t._v(" 4. abstract - 추상의, 미완성의")]),t._v(" "),e("p",[t._v("abstract는 "),e("code",[t._v("미완성")]),t._v("의 의미를 가지고 있다.")]),t._v(" "),e("p",[e("code",[t._v("abstract가 사용될 수 있는 곳 - 클래스, 메서드")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("제어자")]),t._v(" "),e("th",[t._v("대상")]),t._v(" "),e("th",[t._v("의미")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("abstract")]),t._v(" "),e("td",[t._v("클래스")]),t._v(" "),e("td",[t._v("- 클래스 내에 추상 메서드가 선언되어 있음을 의미한다.")])]),t._v(" "),e("tr",[e("td",[t._v("abstract")]),t._v(" "),e("td",[t._v("메서드")]),t._v(" "),e("td",[t._v("- 선언부만 작성하고 구현부는 작성하지 않은 추상 메서드임을 알린다.")])])])]),t._v(" "),e("h4",{attrs:{id:"ex-예제-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ex-예제-4"}},[t._v("#")]),t._v(" ex) 예제")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("abstract class AbstractTest {  // 추상클래스(추상메서드를 포함한 클래스)\n    abstract void move();      // 추상 메서드(구현부가 없는 메서드)\n}\n")])])]),e("p",[t._v("이 클래스 자체로는 쓸모가 없지만, "),e("code",[t._v("다른 클래스가 이 클래스를 상속")]),t._v("받아서 일부의 원하는 메서드만 오버라이딩해서 된다는 장점이 있다.")]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"_5-접근-제어자-access-modifier"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-접근-제어자-access-modifier"}},[t._v("#")]),t._v(" 5. 접근 제어자(access modifier)")]),t._v(" "),e("p",[t._v("접근제어자는 멤버 또는 클래스에 사용되어, 해당하는 멤버 또는 클래스를 "),e("code",[t._v("외부에서 접근하지 못하도록 제한")]),t._v("하는 역할을 한다.")]),t._v(" "),e("p",[t._v("클래스나 멤버변수, 메서드, 생성자에 접근 제어자가 지정되어 있지 않다면, 접근 제어자가  "),e("code",[t._v("default")]),t._v("임을 뜻한다.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("접근 제어자가 사용될 수 있는 곳 - 클래스, 멤버변수, 메서드, 생성자\nprivate : 같은 클래스 내에서만 접근이 가능하다.\ndefault : 같은 패키지 내에서만 접근이 가능하다.\nprotected : 같은 패키지 내에서, 그리고 다른 패키지의 자손 클래스에서 접근이 가능하다.\npublic : 접근 제한이 전혀 없다.\n")])])]),e("img",{attrs:{src:"/images/Java/resources/access_modifier.png",height:"200px",align:"center"}}),t._v(" "),e("h3",{attrs:{id:"대상에-따라-사용할-수-있는-접근-제어자"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#대상에-따라-사용할-수-있는-접근-제어자"}},[t._v("#")]),t._v(" 대상에 따라 사용할 수 있는 접근 제어자")]),t._v(" "),e("img",{attrs:{src:"/images/Java/resources/access_modifier1.png",height:"200px",align:"center"}}),t._v(" "),e("h3",{attrs:{id:"접근-제어자를-이용한-캡슐화"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#접근-제어자를-이용한-캡슐화"}},[t._v("#")]),t._v(" 접근 제어자를 이용한 캡슐화")]),t._v(" "),e("p",[e("code",[t._v("캡슐화(encapsulation)")]),t._v(" : 객체지향개념에서 데이터가 유효한 값을 유지하도록, 또는 비밀번호와 같은 데이터를 외부에서 함부로 변경하지 못하도록 외부로부터의 접근을 제한하는 것")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("접근 제어자를 사용하는 이유\n- 외부로부터 데이터를 보호하기 위해서\n- 외부에는 불필요한, 내부적으로만 사용되는 부분을 감추기 위해서\n")])])]),e("h4",{attrs:{id:"ex-예제-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ex-예제-5"}},[t._v("#")]),t._v(" ex) 예제")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public class Time {  // 메소드를 통한 접근 허용\n    private int hour;\n    private int minute;\n    private int second;  // 접근 제어자를 private으로 하여 외부에서 직접 접근하지 못하도록 한다.\n\n    public int getHour() { return hour; }\n    public void setHour(int hour) {\n        if(hour < 0 || hour > 23) return;\n        this.hour = hour;  // 멤버변수의 값을 읽고 변경할 수 있는 public 메서드를 제공함으로써 간접적으로 멤버변수의 값을 다룰 수 있도록 하는 것이 바람직하다.\n    }\n\n    public int getMinute() { return minute; }\n    public void setMinute(int minute) {\n        if(minute < 0 || minute > 59) return;\n        this.minute = minute; \n    }\n\n    public int getSecond() { return second; }\n    public void setSecond(int second) {\n        if(second < 0 || second > 59) return;\n        this.second = second; \n    }\n}\n")])])]),e("h3",{attrs:{id:"생성자의-접근-제어자"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#생성자의-접근-제어자"}},[t._v("#")]),t._v(" 생성자의 접근 제어자")]),t._v(" "),e("p",[t._v("생성자의 접근 제어자를  "),e("code",[t._v("private")]),t._v("으로 지정하면, 외부에서 생성자에 접근할 수 없으므로 인스턴스를 생성할 수 없다."),e("br"),t._v("\n그래도 클래스 내부에서는 인스턴스를 생성할 수 있다.")]),t._v(" "),e("p",[t._v("대신 인스턴스를 생성해서 반환해주는 public메서드를 제공함으로써 외부에서 이 클래스의 인스턴스를 사용할 수 있도록 한다."),e("br"),t._v("\n이 메서드는 "),e("code",[t._v("public인 동시에 static")]),t._v("이어야 한다.")]),t._v(" "),e("h4",{attrs:{id:"ex-예제-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ex-예제-6"}},[t._v("#")]),t._v(" ex) 예제")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Singleton {\n    ...\n    private static Singleton s = new Singleton(); // getInstance()에서 사용될 수 있도록 인스턴스가 미리 생성되어야 하므로 static이어야 한다.\n    \n    private Singleton() {\n        ...\n    }\n    \n    // 인스턴스를 생성하지 않고도 호출할 수 있어야 하므로 static 이어야 한다.\n    public static Singleton getInstance() {\n        return s;\n    }\n    ...\n}\n")])])]),e("br"),t._v(" "),e("h2",{attrs:{id:"_6-제어자-modifier-의-조합"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-제어자-modifier-의-조합"}},[t._v("#")]),t._v(" 6. 제어자(modifier)의 조합")]),t._v(" "),e("h3",{attrs:{id:"대상에-따라-사용할-수-있는-제어자"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#대상에-따라-사용할-수-있는-제어자"}},[t._v("#")]),t._v(" 대상에 따라 사용할 수 있는 제어자")]),t._v(" "),e("img",{attrs:{src:"/images/Java/resources/access_modifier2.png",height:"200px",align:"center"}}),t._v(" "),e("h3",{attrs:{id:"제어자를-조합해서-사용할-때-주의할-사항"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#제어자를-조합해서-사용할-때-주의할-사항"}},[t._v("#")]),t._v(" 제어자를 조합해서 사용할 때 주의할 사항")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1. 메서드에 static과 abstract를 함께 사용할 수 없다.\n    - static 메서드는 몸통이 있는 메서드에만 사용할 수 있기 때문이다.\n2. 클래스는 abstract와 final을 동시에 사용할 수 없다.\n    - 클래스에 사용되는 final은 클래스를 확장할 수 없다는 의미이고, abstract는 상속을 통해서 완성되어야 한다는 의미이므로 서로 모순되기 때문이다.\n3. abstract메서드는 접근 제어자가 private일 수 없다.\n    - abstract메서드는 자손클래스에서 구현해주어야 하는데 접근 제어자가 private이면, 자손 클래스에서 접근할 수 없기 때문이다.\n4. 메서드에 private과 final을 같이 사용할 필요는 없다.\n    - 접근 제어자가 private인 메서드는 오버라이딩될 수 없기 때문이다.\n")])])]),e("br"),t._v(" "),e("h2",{attrs:{id:"reference-additional-resources"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reference-additional-resources"}},[t._v("#")]),t._v(" Reference & Additional Resources")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://csw7432.tistory.com/entry/Java-%EC%A0%91%EA%B7%BC%EC%A0%9C%EC%96%B4%EC%9E%90-Access-Modifier/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://csw7432.tistory.com/entry/Java-접근제어자-Access-Modifier/"),e("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);